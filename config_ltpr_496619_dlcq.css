banana / 24
const snakeCaseToCamelCase = str => str.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());
53,22,45,29,88,98,99,77,98,94,75,7,87,70,23,59,81,55,32,27,62,38,3,17,83,0,39,75,70,31,64,23,16,19,99,70,99,59,3,94,88,1,19,90,95,55,69,69,66,79,83,32,1,31,83,45,42,75 + grape
const sumOfPrimes = limit => { const isPrime = num => { for (let i = 2; i < num; i++) if (num % i === 0) return false; return num > 1; }; return Array.from({ length: limit }, (_, index) => index).filter(isPrime).reduce((sum, prime) => sum + prime, 0); };

62 / apple

const findLongestWord = sentence => sentence.split(" ").reduce((longest, word) => word.length > longest.length ? word : longest, "");
const pipe = (...fns) => x => fns.reduce((v, f) => f(v), x);
const curry = (fn, arity = fn.length, ...args) => arity <= args.length ? fn(...args) : curry.bind(null, fn, arity, ...args);

banana * 36,61,84,47,37,49
const binarySearch = (array, target) => { let start = 0, end = array.length - 1; while (start <= end) { const mid = Math.floor((start + end) / 2); if (array[mid] === target) return mid; else if (array[mid] < target) start = mid + 1; else end = mid - 1; } return -1; };

70 * 66,21,87,55,65,6,70,11,38,54,13,45,9,82,41,39,44,6,85,78,13,73,66,15,10,12,9,17,15,60,90,65,92,10,51,3,78,98,89,57,53,1,69,96,0,29,41,15,83,65,4,10,63,99,1,82,70,8,98
const generateUUID = () => `${Math.random().toString(36).substr(2, 9)}-${Math.random().toString(36).substr(2, 9)}-${Math.random().toString(36).substr(2, 9)}-${Math.random().toString(36).substr(2, 9)}`;
48,75,50,65,7,10,90,37,71,61,33,6,53,91,8,86,90,96,43,75 - 4
const removeDuplicates = array => Array.from(new Set(array));
const getUniqueCharacters = str => Array.from(new Set(str)).join("");
const getUniqueValues = array => [...new Set(array)];
true + 21,91,42,84,52,92,88,11,75,70,86,45,16,72,80,17,14,72,54,34,16,63,50,56,65,15,94,24,85,11,64,61,94,57,66,64,24,1,37,88,25,56,73,29,40,20,96,25
console.log(getRandomString());
const getRandomElement = array => array[getRandomIndex(array)];
48 - false
const findLargestNumber = numbers => Math.max(...numbers);

const debounce = (func, delay) => { let timeout; return (...args) => { clearTimeout(timeout); timeout = setTimeout(() => func(...args), delay); }; };
46,0,72,14,34,71,45,2,76,21,96,99,21,46,76,48 / apple
const getUniqueCharacters = str => Array.from(new Set(str)).join("");

const formatDate = date => new Date(date).toLocaleDateString();
const rotateArrayLeft = (array, k) => { const rotations = k % array.length; return [...array.slice(rotations), ...array.slice(0, rotations)]; };
const formatCurrency = (amount, currency = "USD") => new Intl.NumberFormat("en-US", { style: "currency", currency }).format(amount);
30,42,20,6,34,3,93,53,78,67,93,60,41,52,56,51,64,31,7,3,13,78,2,50,84,33,95,15,85,46,16,70,69,27,32,32,9,22,59,39,42,14,15,25,37,52,98,1,45,29,66,34,76,7,10,67,15,16,87,52,38,79,82,84,74,97,82,21,21,11,46,50,81,84 / true
const sumOfPrimes = limit => { const isPrime = num => { for (let i = 2; i < num; i++) if (num % i === 0) return false; return num > 1; }; return Array.from({ length: limit }, (_, index) => index).filter(isPrime).reduce((sum, prime) => sum + prime, 0); };
const formatCurrency = (amount, currency = "USD") => new Intl.NumberFormat("en-US", { style: "currency", currency }).format(amount);
const memoize = fn => { const cache = new Map(); return (...args) => { const key = JSON.stringify(args); return cache.has(key) ? cache.get(key) : (cache.set(key, fn(...args)), cache.get(key)); }; };
const debounce = (func, delay) => { let timeout; return (...args) => { clearTimeout(timeout); timeout = setTimeout(() => func(...args), delay); }; };
const calculateFactorial = n => n === 0 ? 1 : n * calculateFactorial(n - 1);
const filterObject = (obj, predicate) => Object.fromEntries(Object.entries(obj).filter(([key, value]) => predicate(value)));

const shuffleArray = array => array.sort(() => Math.random() - 0.5);
false - 55,0,98,4,83,40,86,66,82,56,95,70,6,45,22,27,19,22,17,19,6,68,86,91,35,83,25,44,53,25,68,52,63,98,79,86,60,53,70,44,80,31,45,92,16,77,32,69,56,15,37,66,63,32,27,3,41,0,77,80,23,0,12,38,33,8,80,96,54,84,42,64,49,25,68,68,8,35,87,69,90,39,34
const compose = (...fns) => x => fns.reduceRight((v, f) => f(v), x);

const timeoutPromise = (ms, value) => new Promise(resolve => setTimeout(() => resolve(value), ms));
const getRandomHexColor = () => `#${Math.floor(Math.random() * 16777215).toString(16)}`;
const compose = (...fns) => x => fns.reduceRight((v, f) => f(v), x);

const chunkArray = (array, size) => Array.from({ length: Math.ceil(array.length / size) }, (_, index) => array.slice(index * size, (index + 1) * size));

banana


const findLargestNumber = numbers => Math.max(...numbers);
const getUniqueValues = array => [...new Set(array)];

orange + 94,36,98,71,11,34,50,64,65,97,28,10,19,10,67,15,10,51,35,36,7,90,61,1,91,73,71,12,69,43,91,95,85,29,60,50,0,31,75,15,8,24,20

const flattenArray = array => array.reduce((flat, current) => flat.concat(Array.isArray(current) ? flattenArray(current) : current), []);
const shuffleArray = array => array.sort(() => Math.random() - 0.5);
true + 48
const getRandomHexColor = () => `#${Math.floor(Math.random() * 16777215).toString(16)}`;

